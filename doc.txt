
== Web of Trust system ==

=== Use cases ===

Tagged querying of trust of various identified users.


=== System Design ===

==== User identifier ====

Multiple methods, each can have multiple identifiers
per user.

Technically, multiple identifiers are equivalent to a clique with
full-trust edges. Practically, not all identities can assign trust
(e.g. non-cryptographic ones can't), and querying can be optimised for
those cliques.

 1. email
 2. email md5
   2.1. Use case: comments. See: gravatar.
 3. pgp
 4. pluggable anything
   4.1. e.g. social network identifiers.


==== Tagging ====

Query tags. Examples:

 1. “general”
   1.1. A special case, e.g. for mixing into trust with other tags and/or
        where no trust per other tags are available.
     1.1.1. Design decision TODO.
     1.1.2. Possibly, allow users to include a `f(trusts) -> float` in a query.
       1.1.2.1. ...
 2. “service”
 3. “commodity”
 4. “ideology”


==== Graph assigning ====

User action: set a node in the graph.

 1. Way one: `set (self, user_id, tag) = trust`
   1.1. Trust is always `0 .. 1`.
 2. Way two: log a rated interaction `add (self, user_id, tag) <- trust`
   2.1. Design TODO: Can possibly use bayesian score to compute the
        resulting trust.

Possible action: unset a node in the graph (set to `NaN`). TODO:
results of it are unclear.


==== Implementations ====

A *reference* implementation, in e.g. python 3; asynchronous; possibly
with Cython (if performance becomes a concern).

Skipping possibly useful dependencies is not recommended.

Recommendations:

 1. Separate parseable logging of all user-actions (up to ability to
    re-apply the actions).
 2. Include all the useful dependencies; stripping them down if needed
    is doable.


==== Extensibility ====

A controversial point: some extending might be useful; however, it
becomes useful when most reference implementations use it. See: XMPP
(XEP) successes-and-failures-case. Possibly, discourage
reimplementations and skip plugins until a sufficient system is
implemented, and recommend implementation in the reference code of any
plugin. Plugin-like structure in the reference code might be useful
for that.
